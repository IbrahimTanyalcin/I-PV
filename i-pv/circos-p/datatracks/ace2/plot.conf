<plots>
<plot>

type  = highlight
file  = ..\datatracks\highlights.txt
r0    = 1r
r1    = 1.1r
color = black
stroke_thickness = 3p
fill_color = black
z = 1

<rules>


<rule>
condition = var(type) eq "Coil"
#stroke_color* = eval(sprintf("hue%03d",remap_int(var(class)**(1/2),1,3.32,0,300)))
stroke_color = dgrey
#fill_color* = eval(sprintf("hue%03d_a2",remap_int(var(class)**(1/2),1,3.32,0,300)))
fill_color = vdgrey
r1 = eval(qw(1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1)[remap_round(var(conservation),0,11,0,9)] .'r')
#coil_1
flow = continue
</rule>


#<rule>
#condition = var(type) eq "Domain"
#stroke_color* = eval(sprintf("hue%03d",remap_int(var(class)**(1/2),1,3.32,0,300)))
#stroke_color = orange
#fill_color* = eval(sprintf("hue%03d_a2",remap_int(var(class)**(1/2),1,3.32,0,300)))
#fill_color = dorange
#r1 = eval(qw(1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1)[remap_round(var(conservation),0,11,0,9)] ."r")
#flow = continue
#</rule>

<rule>
condition = var(type) eq 'Domain' && var(property) eq 'Cytoplasmic'
stroke_color = lgreen
fill_color = green
r1 = eval(qw(1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1)[remap_round(var(conservation),0,11,0,9)] .'r')
flow = continue
</rule>
<rule>
condition = var(type) eq 'Domain' && var(property) eq 'Extracellular'
stroke_color = lblue
fill_color = blue
r1 = eval(qw(1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1)[remap_round(var(conservation),0,11,0,9)] .'r')
flow = continue
</rule>
<rule>
condition = var(type) eq 'Domain' && var(property) eq 'Transmembrane'
stroke_color = lorange
fill_color = orange
r1 = eval(qw(1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1)[remap_round(var(conservation),0,11,0,9)] .'r')
flow = continue
</rule>
#domain_colors
</rules>
</plot>



<plot>

type = text
file = ..\datatracks\protein_sequence.txt
r0 = 0.95r
r1 = 1.0r
overflow = yes
show_links = no
label_rotate = yes
label_snuggle = yes
label_parallel = yes
snuggle_sampling = 2
max_snuggle_distance = 4r
snuggle_tolerance = 2r
snuggle_link_overlap_test = yes
snuggle_link_overlap_tolerance = 2p
#padding = 0.01r
#rpadding = 0.01r
padding = 0.0r
rpadding = 0.0r
label_font = condensed
label_size = 28p
#label_size_sequence
color = vlgrey_a2
link_dims = 1p,3p,30p,3p,1p
link_color = vdred
link_thickness = 6p
z = 2

<rules>


<rule>
condition = var(type) eq "Nonpolar"
color = vdgrey
flow = continue
</rule>


<rule>
condition = var(type) eq "Polar"
color = hue300
flow = continue
</rule>


<rule>
condition = var(type) eq "Negative"
color = vdblue
flow = continue
</rule>


<rule>
condition = var(type) eq "Positive"
color = vdred
flow = continue
</rule>


<rule>
condition = var(type) eq "Aromatic"
color = vdgreen
flow = continue
</rule>


</rules>

</plot>




<plot>
type             = scatter
file             = ..\datatracks\scatter.txt
fill_color       = dorange
stroke_color     = vdorange
stroke_thickness = 0
glyph            = triangle
glyph_size = 31p
#glyph_size_scatter
z                = 3

#max   = 100
#min   = 0.0
r1    = 0.92r
r0    = 0.87r

<backgrounds>
<background>
show      = no
color     = vlblue
stroke_thickness = 0p
stroke_color = vvdgrey
y1        = 1.0r
y0        = 0.0r
</background>
</backgrounds>

<axes>
<axis>
show      = no
color     = vdgrey
thickness = 3
spacing   = 0.5r
y1        = 1.0r
y0        = 0.0r
</axis>

<axis>
show      = no
color     = grey
thickness = 2
spacing   = 0.25r
y1        = 1.0r
y0        = 0.0r
</axis>
</axes>

<rules>

#<rule>
#importance = 110
#condition    = 1
#value*        = 0.5
#flow          = continue
#</rule>



<rule>
condition = var(type) eq "Nonpolar"
fill_color = dgrey
glyph = circle
flow = continue
</rule>


<rule>
condition = var(type) eq "Polar"
fill_color = hue300
glyph = circle
flow = continue
</rule>


<rule>
condition = var(type) eq "Negative"
fill_color = dblue
glyph = triangle
orientation = in
flow = continue
</rule>


<rule>
condition = var(type) eq "Positive"
fill_color = dred
glyph = triangle 
flow = continue
</rule>


<rule>
condition = var(type) eq "Aromatic"
fill_color = dgreen
glyph = hexagon 
flow = continue
</rule>


</rules>

</plot>




<plot>
show = no
type  = histogram
file  = ..\datatracks\modict_plot.txt
r0    = 0.77r
r1    = 0.87r
orientation = out
min   = 0
max   = 10
extend_bin = no
skip_run = no
#min_value_change = 0.2
#stroke_type = outline
stroke_type = bin
color= dgrey_a2
thickness = 3p
fill_color = dgrey_a2
z = 4

<backgrounds>
<background>
show = no
y0 = 0r
y1 = 1r
color = vvlgrey
stroke_color = vvdgrey
stroke_thickness = 0p
</background>
</backgrounds>

<axes>
<axis>
show = no
color = black
spacing = 0.5r
thickness = 1p
</axis>
</axes>

<rules>
#<rule>
#condition = 1
#importance = 110
#value* = eval(remap_round(var(value),0,6.28,0,100))
#flow = continue
#</rule>

<rule>
importance = 100
condition = 1
fill_color = eval(sprintf("hue%03d",remap_int(var(conservation)**2,0,121,200,240)))
color = eval(sprintf("hue%03d",remap_int(var(conservation)**2,0,121,160,200)))
flow = continue
</rule>

#<rule>
#importance = 90
#condition = var(value) > 80
#fill_color = red_a1
#color = lred
#flow = continue
#</rule>

</rules>

</plot>



<plot>

type = text
file = ..\datatracks\text_plot_missense.txt
r0 = 1.09r
r1 = 1.4r
#overflow = yes
show_links = yes
label_rotate = yes
label_snuggle = yes
label_parallel = no
snuggle_sampling = 2
max_snuggle_distance = 4r
snuggle_tolerance = 3r
snuggle_link_overlap_test = yes
snuggle_link_overlap_tolerance = 4p
#padding = 0.01r
#rpadding = 0.01r
padding = 0r
rpadding = 0r
label_font = condensed
label_size = 28p
#label_size_missense
color = vlgrey_a2
link_dims = 1p,3p,30p,3p,1p
link_color = vdred
link_thickness = 4p
#link_thickness
z = 5

<rules>


<rule>
condition = (var(type) eq "Non-synonymous" || var(type) eq "Nonsense")
color = vdred
flow = continue
</rule>


<rule>
condition = var(type) eq "Synonymous"
color = vdgreen
flow = continue
</rule>


<rule>
condition = ((var(validation) ne "Validated") && (var(validation) ne "N/A"))
color = vdgrey
flow = continue
</rule>

</rules>

</plot>



<plot>
show = yes
#markup_choice1
type = connector
file = ..\datatracks\connector.txt
r0   = 0.76r
r1   = 0.80r
connector_dims = 0,0.5,0.8,0.3,0
thickness = 8
color     = dblue
z         = 6

<rules>
<rule>
condition = var(property) eq 'active'
color = red
flow = continue
</rule>
<rule>
condition = var(property) eq 'zinc'
color = vlblue
flow = continue
</rule>
#markup_colors1
</rules>
</plot>



<plot>
show = yes
#markup_choice2
overflow = yes
type = text
file = ..\datatracks\connector_text.txt
r0 = 0.72r
r1 = 0.92r
show_links = no
label_rotate = yes
label_snuggle = yes
label_parallel = yes
snuggle_sampling = 2
max_snuggle_distance = 4r
#max_snuggle_distance = 10r
snuggle_tolerance = 3r
#snuggle_tolerance = 10r
snuggle_link_overlap_test = yes
snuggle_link_overlap_tolerance = 4p
#padding = 0.01r
#rpadding = 0.01r
padding = 0r
rpadding = 0r
label_font = condensed
label_size = 45p
color = vdblue
link_dims = 1p,3p,30p,3p,1p
link_color = vdred
link_thickness = 6p
z = 7

<rules>
<rule>
condition = 1
value = eval(my $display_name = var(value); $display_name =~ s/_/ /g; $display_name)
flow = continue
</rule>
<rule>
condition = var(property) eq 'active'
color = red
flow = continue
</rule>
<rule>
condition = var(property) eq 'zinc'
color = vlblue
flow = continue
</rule>
#markup_colors2
</rules>
</plot>




<plot>

type             = tile
file             = ..\datatracks\tile_plot.txt
color            = black
layers           = 20
thickness = 50p
#tile_thickness
stroke_thickness = 0p
stroke_color     =vvdgrey
padding          = 15r
#margin           = 0.02u
margin           = 0.2u
orientation      = center
layers_overflow  = grow
#layers_overflow_color = black

r1    = 0.675r
r0    = 0.50r
z = 8

<backgrounds>
<background>
show = no
color     = white
stroke_color = vdgrey
stroke_thickness = 0p
</background>
</backgrounds>

<rules>

<rule>
condition = var(type) =~ /sub|miss|syn|nonsyn/
#color* = eval(qw(green dgreen vdgreen vvdgreen)[remap_round(var(times),1,4,0,3)])
color* = vdred
importance = 110
flow = continue
</rule>

<rule>
condition = var(type) =~ /in|del/
importance = 100
#color* = eval(qw(red dred vdred vvdred)[remap_round(var(times),1,4,0,3)])
color = hue300
flow = continue
</rule>


<rule>
condition = ((var(validation) ne "Validated") && (var(validation) ne "N/A"))
importance = 90
#color* = eval(qw(red dred vdred vvdred)[remap_round(var(times),1,4,0,3)])
stroke_color* = vdgrey
stroke_thickness* = 8p
flow = continue
</rule>


</rules>

</plot>

</plots>